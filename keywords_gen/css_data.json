[
  {
    "question": "What is CSS, and what does it stand for?",
    "answer": "CSS stands for Cascading Style Sheets. CSS styles web content aesthetically. CSS defines how the web elements should be displayed on a web page.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases of css in web development?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "How do you include CSS in an HTML document?",
    "answer": "Include CSS in an HTML document through inline styles using <style> tags or external style sheets linked using the <link> tag.",
    "difficulty": "Easy",
    "followup_question": "How do you link external css files to an html document, and what are the differences between using internal stylesheets, external style sheets, and inline styles?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "What are the different ways to apply CSS styles to HTML elements?",
    "answer": "CSS styles can be applied to HTML elements via inline styles, internal CSS with <style> tags, or external CSS files linked to the HTML document.",
    "difficulty": "Medium",
    "followup_question": "How do the following methods of applying css styles to html elements differ in terms of their precedence and scope?",
    "topic": "Inline styles",
    "category": "frontend"
  },
  {
    "question": "Explain the difference between inline, internal, and external CSS.",
    "answer": "Inline CSS applies styles directly within an HTML element's attribute. Internal CSS uses <style> tags within the HTML document's <head>. External CSS links a separate stylesheet file to the HTML document.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for each type of css implementation?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "What is a CSS selector, and how do you use it?",
    "answer": "A CSS selector targets HTML elements to apply styles. To use it specify the element, class, or ID within a CSS rule.",
    "difficulty": "Medium",
    "followup_question": "What are some common patterns or techniques for using css selectors to target specific html elements in a complex dom structure?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "How do you select all elements of a specific type with CSS?",
    "answer": "To select all elements of a specific type with CSS, use the type selector, which matches elements by their tag name. For example, p selects all <p> elements, applying the defined styles to every paragraph in the document.",
    "difficulty": "Medium",
    "followup_question": "What is the most efficient way to achieve this using javascript and the document object model (dom)?",
    "topic": "Selectors",
    "category": "frontend"
  },
  {
    "question": "What is a class selector, and how is it different from an ID selector?",
    "answer": "A class selector in CSS is denoted by a period (.) followed by the class name and applies styles to all elements with that class attribute. An ID selector is indicated by a hash (#) followed by the ID value and targets a unique element with a specific ID attribute. Class selectors allow for the styling of multiple elements. ID selectors are meant for styling individual elements that require unique treatment.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases where using a class selector over an id selector can improve the maintainability and scalability of your css code?",
    "topic": "Css",
    "category": "frontend"
  },
  {
    "question": "What is the importance of specificity in CSS?",
    "answer": "Specificity in CSS is a set of rules that determines which style declarations are applied to an element when multiple declarations have different selectors but could apply to the same element. Specificity ensures that the most relevant style is applied by calculating a specificity value for each selector, where inline styles have the highest specificity, followed by IDs, classes, and then type selectors.",
    "difficulty": "Medium",
    "followup_question": "What are some common pitfalls or consequences that can occur if specificity is not considered while writing css rules?",
    "topic": "Style",
    "category": "frontend"
  },
  {
    "question": "How can you group multiple CSS selectors to apply the same styles?",
    "answer": "To group multiple CSS selectors and apply the same styles, list the selectors separated by commas. This method consolidates CSS rules, reducing redundancy and making the stylesheet more efficient.",
    "difficulty": "Easy",
    "followup_question": "How would you use a css preprocessor like sass or less to simplify grouping of multiple css selectors and apply the same styles efficiently?",
    "topic": "Classselector",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of the \"box model\" in CSS.",
    "answer": "The \"box model\" in CSS describes how elements are structured and how space is managed around and within them. The \u201cbox model\u201d defines the element's content, padding, border, and margin. Understanding the box model is essential for controlling layout and spacing in web design.",
    "difficulty": "Easy",
    "followup_question": "What are the benefits and use cases of using the box model in css, as opposed to other layout models like flexbox or grid?",
    "topic": "Css layouts",
    "category": "frontend"
  },
  {
    "question": "What are the four essential components of the box model?",
    "answer": "The four essential components of the box model are content, padding, border, and margin. The content is the actual text or images within the element. Padding is the space between the content and the border. The border surrounds the padding and content. The margin is the outermost layer, representing the space between the border and other elements.",
    "difficulty": "Easy",
    "followup_question": "What is the role of each component in ensuring data quality and integrity within the box model?",
    "topic": "Data modeling",
    "category": "frontend"
  },
  {
    "question": "How do you control the width and height of an element in CSS?",
    "answer": "To control the width and height of an element in CSS, use the width and height properties. The width and height properties directly affect the element's content box, allowing precise adjustments to its size. These properties help define the layout structure for block-level elements. Inline elements may have limited effects depending on the element's display type.",
    "difficulty": "Medium",
    "followup_question": "How do you handle different screen resolutions when setting a fixed width and height for an element in css?",
    "topic": "Css properties",
    "category": "frontend"
  },
  {
    "question": "What is the difference between margin and padding in CSS?",
    "answer": "Padding is the space between the element's content and its border, serving as an internal spacing mechanism. Margin is the space outside the element's border, providing separation between the element and adjacent elements.",
    "difficulty": "Medium",
    "followup_question": "How do you decide when to use margin versus padding, and what are some common scenarios where one is more suitable than the other?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "How do you center an element horizontally and vertically in CSS?",
    "answer": "To center an element horizontally and vertically in CSS, various techniques are employed depending on the layout context. For horizontal centering, setting margin: auto; with a defined width on block-level elements works effectively. For vertical centering, techniques vary, including using flexbox with display: flex; and align-items: center; for parent elements, or transforming and translating for absolute positioning.",
    "difficulty": "Easy",
    "followup_question": "How would you make sure that the centered element remains responsive when its parent container is resized or has different screen sizes?",
    "topic": "Css layout",
    "category": "frontend"
  },
  {
    "question": "What is the purpose of the \"display\" property in CSS?",
    "answer": "The \"display\" property in CSS specifies how an element is displayed on the web page. The \u201cdisplay\u201d property controls the layout behavior of an element, with values like block, inline, inline-block, and none.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases for setting the `display` property to `none` or `block` in a css layout?",
    "topic": "Css property",
    "category": "frontend"
  },
  {
    "question": "Describe the difference between \"block\" and \"inline\" elements in CSS.",
    "answer": "Block elements in CSS always start on a new line and occupy the full width available, stretching out to the left and right as far as possible. Inline elements do not start on a new line and only take up as much width as necessary.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases for block-level styling versus inline styling, and how does this impact the layout of a html document?",
    "topic": "Html elements",
    "category": "frontend"
  },
  {
    "question": "How can you hide an element using CSS without affecting its layout?",
    "answer": "To hide an element using CSS without affecting its layout, use the visibility: hidden; property. Unlike display: none;, which removes the element from the document flow, visibility: hidden; maintains the element's position and space.",
    "difficulty": "Easy",
    "followup_question": "How do you use the `opacity` property or `visibility` attribute to achieve this while ensuring the element's layout remains intact?",
    "topic": "**display**",
    "category": "frontend"
  },
  {
    "question": "What is the \"float\" property, and how does it work?",
    "answer": "The \"float\" property in CSS positions an element to the left or right of its container, allowing other content to wrap around it. Float is commonly used for layouts and positioning images within text. Elements that are floated will be taken out of the normal flow, but still affect the layout by pushing adjacent content to wrap around them.",
    "difficulty": "Medium",
    "followup_question": "How does the `float` property affect layout and positioning of elements in a css layout, especially when combined with other properties like `display`, `position`, and `clear`?",
    "topic": "Html",
    "category": "frontend"
  },
  {
    "question": "Explain the difference between absolute and relative positioning in CSS.",
    "answer": "Absolute positioning removes an element from the normal document flow, placing it at specific coordinates relative to its nearest positioned ancestor or the document body. Relative positioning moves an element relative to its normal position without removing it from the document flow, affecting the position of subsequent elements as if it had not been moved.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for each type of positioning, and how do they affect the layout of a web page?",
    "topic": "Css positioning",
    "category": "frontend"
  },
  {
    "question": "What is the purpose of the \"z-index\" property in CSS?",
    "answer": "The \"z-index\" property in CSS controls the stacking order of elements that overlap. Elements with a higher z-index value are rendered in front of those with a lower z-index. The \u201cz-index\u201d property is essential for creating complex layouts and ensuring that certain elements, like modals or dropdown menus, appear above others.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases for the z-index property in css, and how does it impact element stacking order?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "How can you create a simple CSS animation?",
    "answer": "Creating a simple CSS animation involves defining keyframes and the animation properties. The @keyframes rule specifies the animation sequence, using percentages to indicate the timeline of the animation.",
    "difficulty": "Easy",
    "followup_question": "How would you use css keyframe animation to create a smooth transition between two styles for an html element, and what properties would you animate in order to achieve the desired effect?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What is the difference between \"position: relative\" and \"position: absolute\"?",
    "answer": "\"Relative\" positioning moves an element concerning where it would normally be in the document flow. \"Absolute\" positioning places an element at a specific position within its nearest positioned ancestor or the document body if no such ancestor exists.",
    "difficulty": "Medium",
    "followup_question": "What are the scenarios in which using `position: absolute` would be more beneficial over `position: relative`?",
    "topic": "Css positioning",
    "category": "frontend"
  },
  {
    "question": "How do you make text bold and italic using CSS?",
    "answer": "To make text bold and italic in CSS, use the font-weight and font-style properties, respectively. Setting font-weight: bold; makes the text bold, while font-style: italic; makes the text italic.",
    "difficulty": "Medium",
    "followup_question": "How would you handle browser compatibility issues when styling text as bold and italic using css?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "Explain the use of pseudo-classes in CSS and provide examples.",
    "answer": "Pseudo-classes in CSS are used to define special states of an element. Examples include :hover, which applies styles when the user hovers over an element with the mouse, and :focus, which applies when an element gains focus.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases for using pseudo-classes, such as :hover or :active, to create dynamic styling effects?",
    "topic": "Css pseudo-classes",
    "category": "frontend"
  },
  {
    "question": "How can you apply CSS styles only to visited links?",
    "answer": "To apply CSS styles only to visited links, use the \u201c:visited\u201d pseudo-class. The \u201c:visited\u201d pseudo-class targets links that the user has already visited, allowing for different styling to distinguish them from unvisited links. This enhances navigational cues and user experience by visually indicating visited links.",
    "difficulty": "Easy",
    "followup_question": "How do you use the `:visited` pseudo-class in your css selector to target only visited links?",
    "topic": "Html & css",
    "category": "frontend"
  },
  {
    "question": "What is the \"box-sizing\" property, and why is it important?",
    "answer": "The \"box-sizing\" property in CSS controls how the width and height of elements are calculated. When set to border-box, the width and height include padding and border, but not the margin. The \u201cborder-box\u201d property is important for creating layouts that behave predictably across different browsers and screen sizes.",
    "difficulty": "Easy",
    "followup_question": "How does the value of box-sizing affect the layout and positioning of html elements within a css container?",
    "topic": "Css",
    "category": "frontend"
  },
  {
    "question": "How do you change the color of text and background in CSS?",
    "answer": "To change the color of text and background in CSS, use the color and background-color properties, respectively. Color applies to the text itself and background-color applies to the area behind the text.",
    "difficulty": "Medium",
    "followup_question": "How do you achieve a transparent background while keeping the original color in css?",
    "topic": "Style",
    "category": "frontend"
  },
  {
    "question": "What is the \"float\" property used for, and how can it lead to layout issues?",
    "answer": "The \"float\" property is used to wrap text around images or to position elements side by side within a container.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases where the `float` property can lead to unexpected layout issues, and how would you troubleshoot these problems in a production environment?",
    "topic": "Css",
    "category": "frontend"
  },
  {
    "question": "What is the CSS \"clearfix\" technique, and when is it necessary?",
    "answer": "The CSS \"clearfix\" technique solves layout issues caused by floating elements. Applying the clearfix to a parent element ensures the element properly contains its floated children, preventing them from overflowing outside their container. This technique involves adding a pseudo-element with clear: both; to the parent element.",
    "difficulty": "Easy",
    "followup_question": "What are some common scenarios where the css clearfix technique helps resolve layout issues or prevents parent elements from collapsing?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "How can you make a CSS rule more specific without using IDs?",
    "answer": "To make a CSS rule more specific without using IDs, combine class selectors or use attribute selectors. Specificity increases with each added selector, allowing for more targeted styling without relying on the higher specificity of ID selectors.",
    "difficulty": "Medium",
    "followup_question": "How would you use attribute selectors to target an element based on its attributes, rather than relying solely on class names or tag names?",
    "topic": "Classselectors",
    "category": "frontend"
  },
  {
    "question": "What is the CSS \"box-shadow\" property, and how can you create a shadow effect for elements?",
    "answer": "The CSS \"box-shadow\" property adds shadow effects around an element's frame. Designers apply it by specifying values for horizontal and vertical offsets, an optional blur radius, an optional spread radius, and a color.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases for using box-shadows in web design, such as adding depth to buttons or creating visual interest around links?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of CSS specificity, and how can it affect the cascade of styles?",
    "answer": "CSS specificity determines which styles apply to an element when multiple rules conflict. Specificity calculation relies on counting the types and occurrences of CSS selectors, with inline styles, IDs, classes, attributes, and element names contributing to the score. Higher specificity scores override lower ones, ensuring the cascade of styles follows a predictable pattern.",
    "difficulty": "Medium",
    "followup_question": "How does css specificity impact the order in which rules are applied when there are multiple conflicting styles defined for an element?",
    "topic": "**css**",
    "category": "frontend"
  },
  {
    "question": "How do you create a responsive design using CSS media queries?",
    "answer": "Responsive design in CSS utilizes media queries to apply different styles based on device characteristics such as width, height, and orientation. Media queries enable web pages to adapt layout and appearance for various screen sizes, enhancing usability and accessibility.",
    "difficulty": "Medium",
    "followup_question": "What are some best practices for implementing mobile-first design and ensuring a seamless user experience across various devices and screen sizes using css media queries?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "What is the purpose of the CSS \"position\" property, and how does it work with values like \"fixed\" and \"sticky\"?",
    "answer": "The CSS \"position\" property controls an element's positioning scheme with values like \"fixed\" and \"sticky\". \"Fixed\" positioning anchors an element to the browser window, while \"sticky\" positioning toggles between relative and fixed, based on the user's scroll position.",
    "difficulty": "Easy",
    "followup_question": "What are some scenarios where using `position: fixed` or `position: sticky` would be particularly useful in a web application?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "Describe the difference between \"em\" and \"rem\" units in CSS for font sizing.",
    "answer": "\"Em\" and \"rem\" units in CSS facilitate scalable font sizing. \"Em\" is relative to the font size of its parent, allowing for compound scaling. The \"rem\" is relative to the root element's font size, providing consistent scaling across the document.",
    "difficulty": "Easy",
    "followup_question": "What is the correct usage of `em` and `rem` units to ensure consistent font sizing across different browsers and devices?",
    "topic": "**typography**",
    "category": "frontend"
  },
  {
    "question": "How can you vertically align an element in the middle of its parent container with CSS?",
    "answer": "Vertical alignment of an element in the middle of its parent container requires CSS techniques such as flexbox or grid display properties. Flexbox uses align-items: center, while grid employs align-content: center for vertical centering.",
    "difficulty": "Medium",
    "followup_question": "How do you ensure that the alignment is maintained even when the parent container's height changes dynamically?",
    "topic": "Css layout",
    "category": "frontend"
  },
  {
    "question": "What are CSS transitions, and how do they help in creating smooth animations?",
    "answer": "CSS transitions enable smooth animation effects by specifying the change in properties over a duration. Transitions enhance user interface interactivity by animating the transition between CSS property values.",
    "difficulty": "Medium",
    "followup_question": "What is the difference between css transition-property and css transition-duration properties, and when would you choose to use each?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "Explain the use of CSS pseudo-elements like \"::before\" and \"::after.\"",
    "answer": "CSS pseudo-elements \"::before\" and \"::after\" insert content into a page without altering the HTML. The pseudo-elements create decorative elements or add content before or after an element's content, enriching the document's visual appeal and layout.",
    "difficulty": "Medium",
    "followup_question": "What is the primary difference between using ::before and ::after pseudo-elements, and when would you choose to use each?",
    "topic": "**css pseudo-elements**",
    "category": "frontend"
  },
  {
    "question": "How can you create a CSS grid layout for complex page structures?",
    "answer": "CSS grid layout arranges elements in a two-dimensional grid. The grid layout offers a powerful and flexible method for designing complex page structures. Grid layout simplifies alignment, distribution, and repositioning of content, supporting responsive design.",
    "difficulty": "Medium",
    "followup_question": "What are some best practices and techniques to use when defining grid templates, such as using grid-template-rows and grid-template-columns properties, to ensure scalability and maintainability in complex page structures?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "Describe the concept of the CSS \"flexbox\" layout and its advantages.",
    "answer": "The CSS \"flexbox\" layout provides an efficient way to distribute space and align items in a container, even when their size is unknown. Flexbox layout's advantages include easier alignment, direction control, and order manipulation, optimizing UI design.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases where using css flexbox can improve the structure and readability of a webpage?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What is the \"calc()\" function in CSS, and when is it useful?",
    "answer": "The \"calc()\" function in CSS performs calculations to determine CSS property values. The \u201ccal()\u201d function combines units like percentages, pixels, ems, and rems, useful for creating responsive designs that require dynamic calculations.",
    "difficulty": "Unknown",
    "followup_question": "Unknown",
    "topic": "Unknown",
    "category": "frontend"
  },
  {
    "question": "How do you implement a multi-column layout using CSS?",
    "answer": "Multi-column layouts in CSS are achieved using the column-count and column-gap properties, enabling the creation of newspaper-like layouts. The Multi-column approach simplifies the creation of text flows across multiple columns, enhancing readability and design.",
    "difficulty": "Medium",
    "followup_question": "How would you handle common issues that can arise when implementing a multi-column layout, such as unequal column heights or content overflowing from one column to another?",
    "topic": "Css grid",
    "category": "frontend"
  },
  {
    "question": "What is the CSS \"currentColor\" keyword, and how does it work?",
    "answer": "The CSS \"currentColor\" keyword represents the current color value of an element, allowing for consistency in styling properties like border, shadow, and text color. The \u201ccurrentColor\u201d keyword streamlines design by ensuring elements adapt to the current color context.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for using the `currentcolor` keyword in css, and how can you take advantage of its dynamic nature to create more flexible and reusable styles?",
    "topic": "Css properties",
    "category": "frontend"
  },
  {
    "question": "How can you implement a sticky header or footer using CSS?",
    "answer": "Sticky headers or footers are implemented in CSS using the position property with a value of \"sticky\". This technique keeps elements visible at the top or bottom of the viewport as the user scrolls, improving navigation and accessibility.",
    "difficulty": "Medium",
    "followup_question": "How would you handle edge cases where the sticky element's height changes due to dynamic content added or removed, ensuring the header or footer remains sticky and functional?",
    "topic": "Css layout",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of CSS transformations, and provide examples of their use.",
    "answer": "CSS transformations apply visual effects like rotation, scaling, and skewing to elements. Examples include rotating an image or scaling an element on hover, enhancing the visual interaction and dynamic presentation of content.",
    "difficulty": "Medium",
    "followup_question": "What are some common scenarios where using css transformations can improve the user experience and how do you optimize them for better performance?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "What are CSS variables (custom properties), and how do they differ from regular variables?",
    "answer": "CSS variables, or custom properties, store values that can be reused throughout a document. Unlike regular variables, CSS variables cascade and are scoped to elements, enabling theme customization and dynamic styling.",
    "difficulty": "Medium",
    "followup_question": "What is the use case for using css custom properties (variables) in a stylesheet, as opposed to defining them through javascript or other programming languages?",
    "topic": "Css properties",
    "category": "frontend"
  },
  {
    "question": "How can you make text responsive and maintain readability across different screen sizes?",
    "answer": "Responsive text sizing in CSS employs responsive units like vw (viewport width) and em, ensuring text remains legible and adapts to various screen sizes. This approach maintains readability across devices, improving user experience.",
    "difficulty": "Medium",
    "followup_question": "How would you use css media queries and flexible box models to ensure a responsive design while maintaining readability on various screen sizes?",
    "topic": "Css",
    "category": "frontend"
  },
  {
    "question": "What is the \"will-change\" property in CSS, and when should you use it?",
    "answer": "The \"will-change\" property in CSS optimizes performance for elements that will undergo transformations or transitions. Using will-change hints to the browser about forthcoming changes, enabling it to prepare and enhance rendering performance.",
    "difficulty": "Medium",
    "followup_question": "What are some common scenarios where the `will-change` property can improve the performance of animations or transitions?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "Describe the difference between \"absolute\" and \"fixed\" positioning in CSS.",
    "answer": "Absolute positioning places an element relative to its nearest positioned ancestor. The fixed positioning anchors it relative to the viewport.",
    "difficulty": "Medium",
    "followup_question": "What is the impact of using absolute vs fixed positioning on the layout and usability of a webpage?",
    "topic": "Css positioning",
    "category": "frontend"
  },
  {
    "question": "How do you create a CSS tooltip for elements with additional information?",
    "answer": "CSS tooltips for elements are created using the title attribute or custom CSS with the \"::after\" pseudo-element. The CSS tooltips provide additional information on hover, enhancing user understanding and interaction.",
    "difficulty": "Medium",
    "followup_question": "How would you ensure accessibility and usability of the css tooltip for screen readers, keyboard-only navigation, and different devices while maintaining its functionality?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of \"cascading\" in Cascading Style Sheets and its significance.",
    "answer": "The concept of \"cascading\" in CSS describes how styles are applied based on source order, specificity, and importance. Cascading rules ensure that the most relevant style is applied to an element, resolving conflicts and maintaining design consistency.",
    "difficulty": "Easy",
    "followup_question": "How does cascading work when multiple css files are imported, and what are the implications on styling complexity?",
    "topic": "Css",
    "category": "frontend"
  },
  {
    "question": "How can you create a CSS-only navigation menu with dropdowns?",
    "answer": "A CSS-only navigation menu with dropdowns uses the :hover and :focus pseudo-classes. This technique creates interactive menus without JavaScript, improving accessibility and reducing page load times.",
    "difficulty": "Medium",
    "followup_question": "How would you implement the dropdown functionality using only html and css, without relying on javascript or any other external libraries?",
    "topic": "Ui/ux design",
    "category": "frontend"
  },
  {
    "question": "What are vendor prefixes in CSS, and when should you use them?",
    "answer": "Vendor prefixes in CSS ensure compatibility with different browsers for experimental or non-standard features. Prefixes like -webkit-, -moz-, -ms-, and -o- are used before the CSS property enables developers to use new features before full support is achieved.",
    "difficulty": "Medium",
    "followup_question": "What specific scenarios or use cases would you recommend using vendor prefixes for in css, and how do they impact cross-browser compatibility?",
    "topic": "Css vendor prefixes",
    "category": "frontend"
  },
  {
    "question": "Describe the advantages of using CSS pre-processors like SASS or LESS.",
    "answer": "The advantages of CSS pre-processors like SASS or LESS include variables, mixins, nesting, and partials. The CSS pre-processor streamlines the development process, enhances code organization, and facilitates maintenance and reusability.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases for variables and nesting in a css pre-processor, and how do they improve maintainability and reusability of your stylesheets?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "How do you create a responsive image gallery using CSS grid or flexbox?",
    "answer": "Responsive image galleries in CSS utilize grid or flexbox layouts to adapt to different screen sizes. The grid layout provides flexibility in arranging images, ensuring optimal display and accessibility on various devices.",
    "difficulty": "Easy",
    "followup_question": "What are some common pitfalls to avoid when using css grid or flexbox for creating a responsive image gallery, and how would you handle them?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What is the \"clip-path\" property in CSS, and how does it work for creating custom shapes?",
    "answer": "The \"clip-path\" property in CSS creates custom shapes by defining a clipping region. Clip-path shapes include circles, polygons, and ellipses, offering creative possibilities for masking and framing content.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for using the `clip-path` property to create custom shapes in css, and how do you determine the best approach to achieve the desired shape?",
    "topic": "Clip-path",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of CSS specificity, and how can it affect style conflicts in larger projects?",
    "answer": "CSS specificity determines which styles apply to an element when multiple rules conflict. The CSS specificity is calculated based on the types and occurrences of CSS selectors. Inline styles, IDs, classes, attributes, and element names contribute to the specificity score.",
    "difficulty": "Medium",
    "followup_question": "How do you ensure that your css selectors have sufficient specificity to override conflicting styles from external libraries or frameworks in a large-scale project?",
    "topic": "Css rules",
    "category": "frontend"
  },
  {
    "question": "How do you implement a dark mode or theme switcher using CSS variables?",
    "answer": "Implementing a dark mode or theme switcher with CSS variables involves defining color schemes that toggle based on user preference. The \u201cclip-path\u201d technique enhances user experience by providing a comfortable viewing mode for different lighting conditions.",
    "difficulty": "Medium",
    "followup_question": "How would you handle edge cases where certain elements or properties might not be applicable in both light and dark modes, while still maintaining the desired visual consistency?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "What is the \"object-fit\" property in CSS, and when is it useful for handling images?",
    "answer": "The \"object-fit\" property in CSS controls how content fits within its container, preserving aspect ratios or filling the space. Object-fit is useful for images and videos, ensuring they are properly sized and positioned without distortion.",
    "difficulty": "Medium",
    "followup_question": "How does the `object-fit` property affect the appearance of an image when its aspect ratio does not match that of its parent container?",
    "topic": "Object-positioning",
    "category": "frontend"
  },
  {
    "question": "How can you create a CSS-only animated hamburger menu icon?",
    "answer": "A CSS-only animated hamburger menu icon is created using keyframe animations and CSS transitions. This approach transforms the icon into a cross or back, indicating menu activation, and enriching the user interface with a modern, interactive element.",
    "difficulty": "Medium",
    "followup_question": "How would you achieve the animation effect without using javascript and instead rely solely on css transformations, animations, and pseudo-elements to toggle the menu state?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "Describe the \"content-visibility\" property in CSS and its impact on rendering performance.",
    "answer": "The \"content-visibility\" property in CSS improves rendering performance by skipping offscreen content. Content-visibility enhances loading times and responsiveness, making it crucial for web performance optimization.",
    "difficulty": "Medium",
    "followup_question": "How does the content-visibility property affect the rendering of complex layouts, such as those using flexbox or grid, when compared to traditional display properties like visibility or opacity?",
    "topic": "Css layout",
    "category": "frontend"
  },
  {
    "question": "How do you create a responsive layout for emails using CSS?",
    "answer": "Responsive layouts for emails in CSS use inline styles and media queries. These techniques ensure compatibility across email clients, adapting content to various screen sizes for optimal readability and engagement.",
    "difficulty": "Medium",
    "followup_question": "What are some common css techniques and best practices to ensure that your email layout adapts well to different screen sizes and devices?",
    "topic": "Email design",
    "category": "frontend"
  },
  {
    "question": "Explain the use of CSS custom properties (variables) in theming websites.",
    "answer": "CSS custom properties in theming websites enable dynamic style changes. The CSS custom variables store design tokens like colors and fonts, facilitating theme customization and consistency across a site.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for using css custom properties, and how do they improve the flexibility and maintainability of a website's theme?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "What are CSS \"grids\" and \"subgrids,\" and how do they differ from other layout techniques?",
    "answer": "CSS \"grids\" and \"subgrids\" offer a robust layout system for two-dimensional layouts. Grids provide a container-based approach. The subgrids extend grid functionality to grid items, allowing for intricate layout designs.",
    "difficulty": "Medium",
    "followup_question": "What is the primary use case for using css grids versus flexbox or tables, and what are some key benefits of choosing one over the others in a given situation?",
    "topic": "Frontend development",
    "category": "frontend"
  },
  {
    "question": "How can you optimize CSS for web performance and load times?",
    "answer": "Optimizing CSS for web performance involves minimizing file size, using efficient selectors, and leveraging CSS compression. These practices reduce load times and enhance the user experience by ensuring swift page rendering.",
    "difficulty": "Medium",
    "followup_question": "What are some specific techniques to minify, compress, or lazy-load css files to improve page load times, such as using tools like webpack or gzip?",
    "topic": "Code optimisation",
    "category": "frontend"
  },
  {
    "question": "Describe the benefits of using CSS flexbox for building flexible and responsive designs.",
    "answer": "Benefits of using CSS flexbox include simplified alignment, flexible box management, and easy reordering. Flexbox layout adapts content to available space, optimizing responsive design and user interface flexibility.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases where css flexbox can significantly improve the layout and responsiveness of a design, such as in grid-based systems or complex layouts with multiple axes?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "How do you implement CSS shapes, like circles or triangles, using the \"clip-path\" property?",
    "answer": "CSS shapes, like circles or triangles, are created using the \"clip-path\" property. Clip-path enables precise control over the visible area of an element, offering creative options for design and layout.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for implementing css shapes in your designs, and how do you decide when to use them over traditional image sprites or svgs?",
    "topic": "Css shapes",
    "category": "frontend"
  },
  {
    "question": "What is the \"currentColor\" keyword, and how can it be used in CSS for consistent styling?",
    "answer": "The \"currentColor\" keyword in CSS ensures styling consistency. The \u201ccurrentColor\u201d keyword allows properties like border and shadow to inherit the text color, simplifying design coherence and customization.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for using `currentcolor` to achieve consistent styling across different elements in a web page?",
    "topic": "Css properties",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of \"BEM\" (Block Element Modifier) methodology in CSS.",
    "answer": "The \"BEM\" methodology in CSS organizes styles into blocks, elements, and modifiers. BEM enhances the maintainability, reusability, and scalability of CSS by providing a clear structure for style sheets.",
    "difficulty": "Medium",
    "followup_question": "How does bem help in improving maintainability and scalability of css code?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "How can you create a CSS-only navigation menu with smooth scrolling effects?",
    "answer": "A CSS-only navigation menu with smooth scrolling effects employs the scroll-behavior property and anchor links. This technique improves user navigation by providing a smooth transition to different sections of a webpage.",
    "difficulty": "Medium",
    "followup_question": "How do you use absolute and relative positioning, along with css transitions or animations, to create a seamless scrolling effect for the navigation items in your css-only menu?",
    "topic": "Front-end development",
    "category": "frontend"
  },
  {
    "question": "What is the CSS \"grid-template-areas\" property, and how can it be used for advanced grid layouts?",
    "answer": "The CSS \"grid-template-areas\" property defines areas within a grid layout by assigning names to sections of the grid. Web developers use this property to create complex layouts with named grid areas, simplifying the placement of items within the grid.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases or scenarios where using `grid-template-areas` would significantly simplify the creation of complex grid layouts in your project?",
    "topic": "Css grids",
    "category": "frontend"
  },
  {
    "question": "Explain the CSS \"conic-gradient\" property and its use for creating conic gradients.",
    "answer": "The CSS \"conic-gradient\" property creates conic gradients, where color transitions circle around a central point, rather than radiating from the center. Designers employ this property for creating pie charts, loader animations, and circular progress bars.",
    "difficulty": "Medium",
    "followup_question": "What are some common limitations or challenges when using the css conic-gradient property, and how can we work around them to achieve the desired design effect?",
    "topic": "**graphics design**",
    "category": "frontend"
  },
  {
    "question": "How do you implement CSS \"mix-blend-mode\" for blending elements with their background?",
    "answer": "CSS \"mix-blend-mode\" allows elements to blend with their background using various blending techniques. Web designers utilize this property to achieve effects like color blending, contrast adjustment, and creating dynamic visual textures in web content.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases and scenarios where css mix-blend-mode would be particularly useful in achieving the desired visual effect?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What is the \"shape-outside\" property in CSS, and how can it be used to wrap text around irregular shapes?",
    "answer": "The \"shape-outside\" property in CSS enables text to wrap around irregular shapes. The \u201cshape-outside\u201d property allows for the creation of magazine-like layouts where text flows around circular, polygonal, or image-defined shapes, enhancing visual appeal.",
    "difficulty": "Medium",
    "followup_question": "How does the `shape-outside` property interact with the `clip-path` property when wrapping text around complex shapes, and what are some best practices for combining these properties to achieve desired layout effects?",
    "topic": "Shape-outlining",
    "category": "frontend"
  },
  {
    "question": "Describe the CSS \"variables()\" function and its role in creating dynamic styles.",
    "answer": "The CSS \"variables()\" function defines reusable values, known as custom properties. Developers use the \u201cvariables()\u201d function to create dynamic styles that can be easily updated, promoting consistency and flexibility across a website.",
    "difficulty": "Unknown",
    "followup_question": "Unknown",
    "topic": "Unknown",
    "category": "frontend"
  },
  {
    "question": "How can you achieve custom typography effects using CSS \"variable fonts\"?",
    "answer": "Custom typography effects are achieved using CSS \"variable fonts\", which allow a single font file to behave like multiple fonts through adjustable properties like weight, width, and slant. This approach streamlines font management and enhances creative design options.",
    "difficulty": "Medium",
    "followup_question": "How do you utilize font-variant properties, such as `font-variant: small-caps`, to create specific typography effects with custom variable fonts in css?",
    "topic": "Typography",
    "category": "frontend"
  },
  {
    "question": "Explain the CSS \"filter\" property and its application in image and color manipulation.",
    "answer": "The CSS \"filter\" property applies graphical effects like blurring, brightness adjustment, and color manipulation to elements. Designers use the \u201cfilter\u201d property for on-the-fly image editing and visual enhancements without needing separate image files.",
    "difficulty": "Medium",
    "followup_question": "What are some examples of common filters used in css, such as \"blur\" or \"grayscale\", and how can they be combined to achieve specific visual effects?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What is the \"clip-path\" property, and how can it be used to create complex clip paths for elements?",
    "answer": "\"Clip-path\" in CSS defines a clipping region to specify which parts of an element should be visible. Designers use the \u201cclip-path\u201d property to create complex shapes, visual interest, and interaction cues by clipping elements into non-rectangular shapes.",
    "difficulty": "Easy",
    "followup_question": "How does the `clip-path` property work in conjunction with the `<clippath>` element to allow for nested clipping and more advanced clipping shapes?",
    "topic": "Svg property",
    "category": "frontend"
  },
  {
    "question": "How do you create a CSS-only 3D rotating cube or carousel?",
    "answer": "A CSS-only 3D rotating cube or carousel is created using transformations and animations. This technique involves manipulating the transform and transition properties to simulate 3D movement, providing an interactive user experience without JavaScript.",
    "difficulty": "Medium",
    "followup_question": "How do you handle perspective and depth cues in your css-only 3d rotation to ensure a realistic visual effect?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "Describe the concept of \"custom scrollbars\" using CSS and their implementation.",
    "answer": "Custom scrollbars are implemented using CSS to style the scrollbar of an element. This customization enhances the user interface by aligning scrollbars with the design aesthetics of the website.",
    "difficulty": "Medium",
    "followup_question": "How do you handle issues related to compatibility, accessibility, and browser support while implementing custom scrollbars with css?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What are CSS \"pseudo-elements\" like \"::first-letter\" and \"::first-line,\" and when should you use them?",
    "answer": "CSS \"pseudo-elements\" like \"::first-letter\" and \"::first-line\" target the first letter or line of an element. Stylists use pseudo-elements to enhance the readability and visual appeal of text, applying styles like drop caps and text highlighting.",
    "difficulty": "Medium",
    "followup_question": "How do css pseudo-elements like ::first-letter and ::first-line improve the accessibility of a web page for screen readers and other assistive technologies?",
    "topic": "Html/css",
    "category": "frontend"
  },
  {
    "question": "How can you create a CSS-only parallax scrolling effect for web pages?",
    "answer": "A CSS-only parallax scrolling effect creates a sense of depth by moving background and foreground content at different speeds. The effect is achieved by manipulating background-attachment and using perspective in CSS, enhancing user engagement.",
    "difficulty": "Easy",
    "followup_question": "What are some common techniques and tricks used to achieve a smooth and seamless parallax scrolling effect in css, and how do they differ from traditional scrolling effects?",
    "topic": "**front-end development**",
    "category": "frontend"
  },
  {
    "question": "Explain the CSS \"mask\" property and its use for advanced masking and clipping.",
    "answer": "The CSS \"mask\" property applies masking to an element, controlling its visibility. Designers use the \u201cmask\u201d property for advanced masking effects, such as fading edges, complex shapes, and text masking, for creative visual compositions.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for the `mask` property in css, such as creating custom shapes or hiding complex elements?",
    "topic": "Graphics",
    "category": "frontend"
  },
  {
    "question": "What are CSS \"animations\" and \"transitions,\" and how do they differ in terms of use and performance?",
    "answer": "CSS \"animations\" and \"transitions\" provide motion to web elements, with animations controlling complex sequences and transitions allowing for smooth state changes. The CSS \"animations\" and \"transitions\" properties enhance interactivity and visual feedback in web design.",
    "difficulty": "Medium",
    "followup_question": "What are some common scenarios where you would choose to use css animations over css transitions, and vice versa?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "How can you create responsive typography with CSS using media queries and viewport units?",
    "answer": "Responsive typography with CSS adapts text size and spacing based on screen size using media queries and viewport units. The responsive typography ensures text readability and optimal user experience across various devices.",
    "difficulty": "Medium",
    "followup_question": "How do you use `calc` function to apply responsive typography values calculated from viewport unit measurements within media queries, ensuring a seamless layout across different screen sizes?",
    "topic": "Css layout",
    "category": "frontend"
  },
  {
    "question": "Describe the CSS \"aspect-ratio\" property and its role in maintaining aspect ratios for elements.",
    "answer": "The CSS \"aspect-ratio\" property maintains the size ratio of elements regardless of screen size or layout changes. The \u201caspect-ratio\u201d property is crucial for responsive design, ensuring media content maintains its intended aspect ratio.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases where setting a specific aspect ratio using the `aspect-ratio` property can significantly improve the user experience, and how would you handle potential layout issues that may arise when applying this property to different types of elements?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "What is \"flex-grow\" and \"flex-shrink\" in CSS flexbox, and how do they influence layout?",
    "answer": "\"Flex-grow\" and \"flex-shrink\" in CSS flexbox control the expansion and contraction of flex items within a flex container. These properties optimize space distribution, aligning content dynamically and efficiently in flexible layouts.",
    "difficulty": "Medium",
    "followup_question": "How does the `flex-basis` property interact with `flex-grow` and `flex-shrink`, and what are the implications for layout when using these properties together?",
    "topic": "Css flexbox",
    "category": "frontend"
  },
  {
    "question": "How can you use the \"backdrop-filter\" property in CSS for advanced background effects?",
    "answer": "The \"backdrop-filter\" property in CSS applies graphical effects to the area behind an element. Web designers use this property for creating frosted glass effects, enhancing background content interaction without affecting the element's foreground.",
    "difficulty": "Medium",
    "followup_question": "How do you apply multiple backdrop-filter properties to achieve a layered or blended effect, and what are some common use cases for this technique?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "Explain the \"nth-child\" and \"nth-of-type\" CSS selectors for targeting specific elements in a group.",
    "answer": "The \"nth-child\" and \"nth-of-type\" CSS selectors target specific elements based on their position within a parent.",
    "difficulty": "Easy",
    "followup_question": "What is the difference between `:nth-child(n)` and `:nth-of-type(type)` selectors, and how do you decide which one to use when targeting elements within a group?",
    "topic": "**css selectors**",
    "category": "frontend"
  },
  {
    "question": "How do you implement CSS \"shapes\" for decorative elements, such as triangles and circles?",
    "answer": "CSS \"shapes\" for decorative elements create visually engaging designs without images. Designers use properties like border-radius and clip-path to craft shapes such as circles, triangles, and polygons, enhancing the visual composition.",
    "difficulty": "Medium",
    "followup_question": "How would you handle browser compatibility issues when using css shapes, considering that older browsers may not support the feature?",
    "topic": "Css shapes",
    "category": "frontend"
  },
  {
    "question": "What is the CSS \"pointer-events\" property, and how can it be used for interactive designs?",
    "answer": "The CSS \"pointer-events\" property controls how the mouse interacts with an element. The \u201cpointer-events\u201d property is used to enable or disable mouse events, facilitating interactive designs and user experience enhancements.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for using `pointer-events` to create complex interactive designs in modern web applications?",
    "topic": "Style",
    "category": "frontend"
  },
  {
    "question": "Describe the CSS \"counter\" and \"counter-increment\" properties for creating numbered lists and counters.",
    "answer": "The CSS \"counter\" and \"counter-increment\" properties generate automatic counters for numbered lists and content. Web developers use these properties for creating custom counters, improving navigation, and enhancing the structure of content.",
    "difficulty": "Easy",
    "followup_question": "What are some common use cases where using `counter-reset` instead of `counter-increment` can be beneficial?",
    "topic": "\",
    "category": "frontend"css\""
  },
  {
    "question": "How can you create a CSS-only responsive navigation menu with advanced features like mega menus?",
    "answer": "A CSS-only responsive navigation menu incorporates advanced features like mega menus without JavaScript. This approach leverages CSS for dynamic layouts, enhancing usability and accessibility across devices.",
    "difficulty": "Medium",
    "followup_question": "What are some common pitfalls to avoid when creating a css-only responsive navigation menu, and how can we use media queries and flexbox to overcome them?",
    "topic": "Frontend development",
    "category": "frontend"
  },
  {
    "question": "Explain the use of CSS \"text-overflow\" for handling text truncation and ellipsis.",
    "answer": "CSS \"text-overflow\" handles text truncation with ellipsis or clipping when content overflows its container. The \u201ctext-overflow\u201d property improves user interface design by maintaining layout integrity and readability.",
    "difficulty": "Medium",
    "followup_question": "What is the difference between `text-overflow` and `ellipsis` in terms of achieving text truncation, and how do you decide when to use each property?",
    "topic": "Web development",
    "category": "frontend"
  },
  {
    "question": "What is the CSS \"will-change\" property, and when should it be applied for optimizing animations?",
    "answer": "The CSS \"will-change\" property hints to the browser about elements that will change. This optimization advises browsers to prepare for animations or transformations, improving performance and reducing flickers.",
    "difficulty": "Medium",
    "followup_question": "What does the `will-change` property do to improve animation performance, and are there any specific scenarios where its impact is most noticeable?",
    "topic": "Layout",
    "category": "frontend"
  },
  {
    "question": "How can you create a CSS-only image slider or carousel with advanced transition effects?",
    "answer": "A CSS-only image slider or carousel with advanced transition effects utilizes keyframe animations and transitions. This method creates smooth, engaging content displays without relying on JavaScript, enhancing page load times and interaction.",
    "difficulty": "Medium",
    "followup_question": "How do you utilize css pseudo-elements, animations, and keyframe transitions to achieve complex movement patterns and realistic depth in your image slider?",
    "topic": "Css, animations",
    "category": "frontend"
  },
  {
    "question": "Describe the \"scroll-snap-type\" and \"scroll-snap-align\" properties for advanced scroll snapping behavior.",
    "answer": "The \"scroll-snap-type\" and \"scroll-snap-align\" properties enable advanced scroll-snapping behavior. The \"scroll-snap-type\" and \"scroll-snap-align\" properties guide scrolling to specific points within a scroll container, improving navigation and content focus.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for the `scroll-margin` property when combined with `scroll-snap-type` and `scroll-snap-align`, and how does it affect the overall scrolling experience?",
    "topic": "Css properties",
    "category": "frontend"
  },
  {
    "question": "What are the CSS \"shapes\" for controlling the flow of text around elements with complex shapes?",
    "answer": "CSS \"shapes\" control the flow of text around elements with complex shapes, merging visual art with text layout. The CSS \u201cshapes\u201d property enhances content readability and visual appeal by allowing text to complement non-rectangular design elements.",
    "difficulty": "Medium",
    "followup_question": "What are the benefits and limitations of using `shape-outside` property to define a non-rectangular box in css, as opposed to using other methods such as pseudo-elements or absolute positioning?",
    "topic": "Box-sizing",
    "category": "frontend"
  },
  {
    "question": "How do you implement \"Sticky Headers\" and \"Sticky Footers\" using CSS for complex layouts?",
    "answer": "\"Sticky Headers\" and \"Sticky Footers\" are implemented using CSS for complex layouts. Positioning properties like position: sticky; ensure elements remain in view during scrolling, improving navigation and user experience.",
    "difficulty": "Medium",
    "followup_question": "How do you handle layout shifting when implementing sticky headers and sticky footers, especially in cases where the content is dynamic or the layout is responsive?",
    "topic": "Layout design",
    "category": "frontend"
  },
  {
    "question": "Explain the concept of CSS \"blend modes\" and their use in creating visually appealing designs.",
    "answer": "CSS \"blend modes\" offer a variety of effects for blending layers, including color mixing and luminosity. Designers use blend modes to create depth, contrast, and interest, elevating the aesthetic quality of designs.",
    "difficulty": "Medium",
    "followup_question": "What are some common use cases for blend modes, such as overlaying text on an image or combining multiple design elements to create a unique visual effect?",
    "topic": "Web design",
    "category": "frontend"
  }
]
